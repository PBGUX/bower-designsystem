import { OnInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { NgbDate, NgbCalendar, NgbDatepickerI18n, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { PbdsDaterangePreset, PbdsDaterangePresetValue, PbdsDaterangeFilter, PbdsDaterangeChange } from './daterange-popover.interfaces';
import { PbdsDaterangeService } from './daterange-popover.service';
import { PlacementArray } from '@ng-bootstrap/ng-bootstrap/util/positioning';
export declare class CustomDatepickerI18n extends NgbDatepickerI18n {
    daterangeService: PbdsDaterangeService;
    constructor(daterangeService: PbdsDaterangeService);
    getWeekdayShortName(weekday: number): string;
    getMonthShortName(month: number): string;
    getMonthFullName(month: number): string;
    getDayAriaLabel(date: NgbDateStruct): string;
}
export declare class PbdsDaterangePopoverComponent implements OnInit, OnChanges {
    private calendar;
    private daterangeService;
    private datepickerPopup;
    presets: Array<PbdsDaterangePreset>;
    presetSelected: PbdsDaterangePresetValue;
    filters: Array<PbdsDaterangeFilter>;
    filterSelected: number;
    showCustomPreset: boolean;
    applyText: string;
    cancelText: string;
    customRangeText: string;
    displayMonths: number;
    displayInput: boolean;
    minDate: NgbDate;
    maxDate: NgbDate;
    placement: PlacementArray;
    fromDate: NgbDate | null;
    toDate: NgbDate | null;
    inputFormat: string;
    dateChange: EventEmitter<PbdsDaterangeChange>;
    firstDayOfWeek: import("@angular/common").WeekDay;
    hoveredDate: NgbDate;
    dateRange: string;
    isDatepickerVisible: boolean;
    selectedFilter: any;
    startDate: NgbDate;
    constructor(calendar: NgbCalendar, daterangeService: PbdsDaterangeService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    apply(): void;
    cancel(): void;
    onDateSelection(date: NgbDate): void;
    presetSelect: ($event: Partial<PbdsDaterangePreset>) => boolean;
    presetClick(preset: PbdsDaterangePreset): boolean;
    private getFormattedDate;
    isHovered: (date: NgbDate) => boolean;
    isInside: (date: NgbDate) => boolean;
    isRange: (date: NgbDate) => boolean;
    showDatepicker(): void;
    onFilterChange(filter: any, index: any): void;
    setPreset(value: PbdsDaterangePresetValue): void;
    setFilter(index: number): void;
    setDateRange(value: any): void;
    private setInputLabel;
    private dateFormat;
    private getDaysInMonth;
    private getFromAndToDates;
    private setDateProperties;
}
