{"version":3,"sources":["../../../projects/pb-design-system/column-toggle/column-toggle.component.ts","../../../projects/pb-design-system/column-toggle/column-toggle.module.ts"],"names":["PbdsColumnToggleComponent","this","label","showAllLabel","storagekey","minimum","toggle","EventEmitter","prototype","ngOnInit","_this","columnStorage","localStorage","getItem","JSON","parse","columns","map","column","savedColumn","find","obj","field","selected","setLocalStorage","updateTotalSelected","toggleColumn","totalSelected","emit","showAll","showAllColumns","columnToggleDropdown","visible","close","showSelectedIcon","setItem","stringify","filter","value","length","Component","args","selector","template","Input","Output","NgModule","declarations","imports","CommonModule","NgbDropdownModule","exports"],"mappings":"mjBAIA,SAAAA,IAOSC,KAAAC,MAAQ,UAGRD,KAAAE,aAAe,WAMfF,KAAAG,YAA6B,EAG7BH,KAAAI,QAAU,EAGVJ,KAAAK,OAAyC,IAAIC,EAAAA,oBAK7CP,EAAAQ,UAAAC,SAAA,WAAA,IAAAC,EAAAT,KACDA,KAAKG,aACPH,KAAKU,cAAgBC,aAAaC,QAAQZ,KAAKG,YAE3CH,KAAKU,gBACPV,KAAKU,cAAgBG,KAAKC,MAAMd,KAAKU,eAErCV,KAAKe,QAAQC,KAAI,SAACC,GAChB,IAAMC,EAAcT,EAAKC,cAAcS,MAAK,SAACC,GAAa,OAAAA,EAAIC,QAAUJ,EAAOI,SAC/EJ,EAAOZ,OAAOiB,UAAWJ,GAAcA,EAAYb,OAAOiB,aAI9DtB,KAAKuB,mBAGPvB,KAAKwB,uBAGAzB,EAAAQ,UAAAkB,aAAA,SAAaR,GAEdjB,KAAK0B,gBAAkB1B,KAAKI,SAAWa,EAAOZ,OAAOiB,WAIzDL,EAAOZ,OAAOiB,UAAYL,EAAOZ,OAAOiB,SAEpCtB,KAAKG,YACPH,KAAKuB,kBAGPvB,KAAKK,OAAOsB,KAAK,CACfC,SAAS,EACTX,OAAMA,EACNF,QAASf,KAAKe,UAGhBf,KAAKwB,wBAGAzB,EAAAQ,UAAAsB,eAAA,SAAeC,GACpB9B,KAAKe,QAAQC,KAAI,SAACC,GACZA,EAAOZ,OAAO0B,UAChBd,EAAOZ,OAAOiB,UAAW,MAIzBtB,KAAKG,YACPH,KAAKuB,kBAGPvB,KAAKK,OAAOsB,KAAK,CACfC,SAAS,EACTX,OAAQ,KACRF,QAASf,KAAKe,UAGhBf,KAAKwB,sBACLM,EAAqBE,SAGhBjC,EAAAQ,UAAA0B,iBAAA,SAAiBhB,GACtB,OAAOA,EAAOZ,OAAOiB,SAAW,GAAK,aAG/BvB,EAAAQ,UAAAgB,gBAAA,WACFvB,KAAKG,YACPQ,aAAauB,QAAQlC,KAAKG,WAAYU,KAAKsB,UAAUnC,KAAKe,WAItDhB,EAAAQ,UAAAiB,oBAAA,WACNxB,KAAK0B,cAAgB1B,KAAKe,QAAQqB,QAAO,SAACC,GAAU,OAAAA,EAAMhC,OAAOiB,UAAYe,EAAMhC,OAAO0B,WAASO,iCAnGtGC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAA,+0BAICC,EAAAA,4BAGAA,EAAAA,uBAGAA,EAAAA,0BAGAA,EAAAA,uBAGAA,EAAAA,sBAGAC,EAAAA,gBCdH,iCALCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CAAC/C,GACfgD,QAAS,CAACC,EAAAA,aAAcC,EAAAA,mBACxBC,QAAS,CAACnD","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { PbdsColumnToggle } from './column-toggle.interfaces';\n\n@Component({\n  selector: 'pbds-column-toggle',\n  templateUrl: './column-toggle.component.html',\n  styleUrls: []\n})\nexport class PbdsColumnToggleComponent {\n  @Input()\n  public label = 'Columns';\n\n  @Input()\n  public showAllLabel = 'Show All';\n\n  @Input()\n  public columns: any[];\n\n  @Input()\n  public storagekey: string | false = false;\n\n  @Input()\n  public minimum = 1;\n\n  @Output()\n  public toggle: EventEmitter<PbdsColumnToggle> = new EventEmitter();\n\n  public columnStorage: any;\n  private totalSelected: number;\n\n  public ngOnInit() {\n    if (this.storagekey) {\n      this.columnStorage = localStorage.getItem(this.storagekey);\n\n      if (this.columnStorage) {\n        this.columnStorage = JSON.parse(this.columnStorage);\n\n        this.columns.map((column) => {\n          const savedColumn = this.columnStorage.find((obj: any) => obj.field === column.field);\n          column.toggle.selected = savedColumn ? savedColumn.toggle.selected : true;\n        });\n      }\n\n      this.setLocalStorage();\n    }\n\n    this.updateTotalSelected();\n  }\n\n  public toggleColumn(column: any) {\n    // prevent unchecking all columns\n    if (this.totalSelected === this.minimum && column.toggle.selected) {\n      return;\n    }\n\n    column.toggle.selected = !column.toggle.selected;\n\n    if (this.storagekey) {\n      this.setLocalStorage();\n    }\n\n    this.toggle.emit({\n      showAll: false,\n      column,\n      columns: this.columns\n    });\n\n    this.updateTotalSelected();\n  }\n\n  public showAllColumns(columnToggleDropdown: NgbDropdown) {\n    this.columns.map((column) => {\n      if (column.toggle.visible) {\n        column.toggle.selected = true;\n      }\n    });\n\n    if (this.storagekey) {\n      this.setLocalStorage();\n    }\n\n    this.toggle.emit({\n      showAll: true,\n      column: null,\n      columns: this.columns\n    });\n\n    this.updateTotalSelected();\n    columnToggleDropdown.close();\n  }\n\n  public showSelectedIcon(column: any) {\n    return column.toggle.selected ? '' : 'invisible';\n  }\n\n  private setLocalStorage() {\n    if (this.storagekey) {\n      localStorage.setItem(this.storagekey, JSON.stringify(this.columns));\n    }\n  }\n\n  private updateTotalSelected() {\n    this.totalSelected = this.columns.filter((value) => value.toggle.selected && value.toggle.visible).length;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PbdsColumnToggleComponent } from './column-toggle.component';\n\n@NgModule({\n  declarations: [PbdsColumnToggleComponent],\n  imports: [CommonModule, NgbDropdownModule],\n  exports: [PbdsColumnToggleComponent]\n})\nexport class PbdsColumnToggleModule {}\n"]}