!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@angular/common"),require("@ng-bootstrap/ng-bootstrap")):"function"==typeof define&&define.amd?define("pb-design-system/column-toggle",["exports","@angular/core","@angular/common","@ng-bootstrap/ng-bootstrap"],o):o(((e="undefined"!=typeof globalThis?globalThis:e||self)["pb-design-system"]=e["pb-design-system"]||{},e["pb-design-system"]["column-toggle"]={}),e.ng.core,e.ng.common,e["^7"][0][0])}(this,(function(e,o,t,n){"use strict";var l=function(){function e(){this.storagekey=!1,this.minimum=1,this.toggle=new o.EventEmitter}return e.prototype.ngOnInit=function(){var e=this;this.storagekey&&(this.columnStorage=localStorage.getItem(this.storagekey),this.columnStorage&&(this.columnStorage=JSON.parse(this.columnStorage),this.columns.map((function(o){var t=e.columnStorage.find((function(e){return e.field===o.field}));o.toggle.selected=!t||t.toggle.selected}))),this.setLocalStorage()),this.updateTotalSelected()},e.prototype.toggleColumn=function(e){this.totalSelected===this.minimum&&e.toggle.selected||(e.toggle.selected=!e.toggle.selected,this.storagekey&&this.setLocalStorage(),this.toggle.emit({showAll:!1,column:e,columns:this.columns}),this.updateTotalSelected())},e.prototype.showAllColumns=function(e){this.columns.map((function(e){e.toggle.visible&&(e.toggle.selected=!0)})),this.storagekey&&this.setLocalStorage(),this.toggle.emit({showAll:!0,column:null,columns:this.columns}),this.updateTotalSelected(),e.close()},e.prototype.showSelectedIcon=function(e){return e.toggle.selected?"":"invisible"},e.prototype.setLocalStorage=function(){this.storagekey&&localStorage.setItem(this.storagekey,JSON.stringify(this.columns))},e.prototype.updateTotalSelected=function(){this.totalSelected=this.columns.filter((function(e){return e.toggle.selected&&e.toggle.visible})).length},e}();l.decorators=[{type:o.Component,args:[{selector:"pbds-column-toggle",template:'<div ngbDropdown #columnToggleDropdown="ngbDropdown" [autoClose]="\'outside\'" class="d-inline-block">\n  <button class="btn btn-secondary" id="toggle-column" ngbDropdownToggle>\n    <i class="pbi-icon-mini pbi-column-toggle"></i>\n  </button>\n\n  <div ngbDropdownMenu aria-labelledby="toggle-column">\n    <ng-container *ngFor="let column of columns">\n      <button *ngIf="column.toggle.visible" class="dropdown-item" (click)="toggleColumn(column)">\n        <i class="pbi-icon-mini pbi-check small mr-1" [ngClass]="showSelectedIcon(column)"></i>\n        {{ column.header }}\n      </button>\n    </ng-container>\n\n    <div class="dropdown-divider"></div>\n\n    <button class="dropdown-item" (click)="showAllColumns(columnToggleDropdown)">Show All</button>\n  </div>\n</div>\n'}]}],l.propDecorators={columns:[{type:o.Input}],storagekey:[{type:o.Input}],minimum:[{type:o.Input}],toggle:[{type:o.Output}]};var s=function(){};s.decorators=[{type:o.NgModule,args:[{declarations:[l],imports:[t.CommonModule,n.NgbDropdownModule],exports:[l]}]}],e.PbdsColumnToggleComponent=l,e.PbdsColumnToggleModule=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=pb-design-system-column-toggle.umd.min.js.map